name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: 'ubuntu-latest'

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildImage: false
    deployService: false
    feedbackUrl: ""
    deployEnvironment: 'no'
    imageTags: 'no'
    frontServiceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildImage: true
    deployService: true
    feedbackUrl: "https://dev.manage.rtuitlab.dev"
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    frontServiceName: landing-develop_front
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildImage: true
    deployService: true
    feedbackUrl: "https://manage.rtuitlab.dev"
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    frontServiceName: landing_front

stages:
- stage: build
  jobs:
  - job: buildFront
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - task: file-creator@6
      inputs:
        filepath: '.env'
        filecontent: |
          NODE_ENV=${{deployEnvironment}}
          REACT_APP_DEV_API=${{feedbackUrl}}
        endWithNewLine: true
    - script: |
        npx jake
      displayName: 'Jake'

    - publish: ./deploy
      artifact: landing-build
- stage: dockerImage
  condition: ${{variables.buildImage}}
  jobs:
  - job: dockerBuild
    steps:
    - download: current
      artifact: landing-build
      displayName: Download landing-build
    - task: Docker@2
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: 'rtuitlab/landing-front'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/landing-build/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/landing-build'
        tags: ${{variables.imageTags}}
- stage: UpdateFront
  condition: ${{variables.deployService}}
  jobs:
  - deployment: DeployFront
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{variables.deployEnvironment}}
    strategy:
      runOnce:
        on:
          failure:
            steps:
              - download: none
              - task: SSH@0
                inputs:
                  sshEndpoint: 'swarm manager'
                  runOptions: 'commands'
                  commands: 'docker service rollback ${{variables.frontServiceName}}'
                  readyTimeout: '20000'
        deploy:
          steps:
            - download: none
            - task: SSH@0
              inputs:
                sshEndpoint: 'swarm manager'
                runOptions: 'commands'
                commands: 'docker service update --image rtuitlab/landing-front:$(Build.BuildId) ${{variables.frontServiceName}}'
                readyTimeout: '20000'
